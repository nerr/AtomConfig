{"mode":"editor","version":1,"windowDimensions":{"x":197,"y":22,"width":1024,"height":717},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/Leon/.atom/packages/language-mql","buffers":[{"text":"{\n    \"fileTypes\":\n    [\n        \"mq5\",\n        \"mq4\",\n        \"mqh\"\n    ],\n\n    \"firstLineMatch\": \"-[*]-( Mode:)? C -[*]-\",\n\n    \"keyEquivalent\": \"^~C\",\n\n    \"name\": \"MQL\",\n\n    \"patterns\":\n    [\n        {\n            \"include\": \"#preprocessor-rule-enabled\"\n        },\n        {\n            \"include\": \"#preprocessor-rule-disabled\"\n        },\n        {\n            \"include\": \"#preprocessor-rule-other\"\n        },\n        {\n            \"include\": \"#comments\"\n        },\n        {\n            \"match\": \"\\\\b(break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while)\\\\b\",\n            \"name\": \"keyword.control.c\"\n        },\n        {\n            \"match\": \"\\\\b(asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void|string)\\\\b\",\n            \"name\": \"storage.type.c\"\n        },\n        {\n            \"match\": \"\\\\b(const|extern|register|restrict|static|volatile|inline|input)\\\\b\",\n            \"name\": \"storage.modifier.c\"\n        },\n        {\n            \"comment\": \"common C constant naming idiom -- kConstantVariable\",\n            \"match\": \"\\\\bk[A-Z]\\\\w*\\\\b\",\n            \"name\": \"constant.other.variable.mac-classic.c\"\n        },\n        {\n            \"match\": \"\\\\bg[A-Z]\\\\w*\\\\b\",\n            \"name\": \"variable.other.readwrite.global.mac-classic.c\"\n        },\n        {\n            \"match\": \"\\\\bs[A-Z]\\\\w*\\\\b\",\n            \"name\": \"variable.other.readwrite.static.mac-classic.c\"\n        },\n        {\n            \"match\": \"\\\\b(NULL|true|false|TRUE|FALSE)\\\\b\",\n            \"name\": \"constant.language.c\"\n        },\n        {\n            \"include\": \"#sizeof\"\n        },\n        {\n            \"match\": \"\\\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\\\.?[0-9]*)|(\\\\.[0-9]+))((e|E)(\\\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\",\n            \"name\": \"constant.numeric.c\"\n        },\n        {\n            \"begin\": \"\\\"\",\n            \"beginCaptures\": {\n                \"0\": {\n                    \"name\": \"punctuation.definition.string.begin.c\"\n                }\n            },\n            \"end\": \"\\\"\",\n            \"endCaptures\": {\n                \"0\": {\n                    \"name\": \"punctuation.definition.string.end.c\"\n                }\n            },\n            \"name\": \"string.quoted.double.c\",\n            \"patterns\": [\n                {\n                    \"include\": \"#string_escaped_char\"\n                },\n                {\n                    \"include\": \"#string_placeholder\"\n                }\n            ]\n        },\n        {\n            \"begin\": \"'\",\n            \"beginCaptures\": {\n                \"0\": {\n                    \"name\": \"punctuation.definition.string.begin.c\"\n                }\n            },\n            \"end\": \"'\",\n            \"endCaptures\": {\n                \"0\": {\n                    \"name\": \"punctuation.definition.string.end.c\"\n                }\n            },\n            \"name\": \"string.quoted.single.c\",\n            \"patterns\": [\n                {\n                    \"include\": \"#string_escaped_char\"\n                }\n            ]\n        },\n        {\n        \"begin\": \"(?x)\\n        \\t\\t^\\\\s*\\\\#\\\\s*(define)\\\\s+             # define\\n        \\t\\t((?<id>[a-zA-Z_][a-zA-Z0-9_]*))  # macro name\\n        \\t\\t(?:                              # and optionally:\\n        \\t\\t    (\\\\()                         # an open parenthesis\\n        \\t\\t        (\\n        \\t\\t            \\\\s* \\\\g<id> \\\\s*       # first argument\\n        \\t\\t            ((,) \\\\s* \\\\g<id> \\\\s*)*  # additional arguments\\n        \\t\\t            (?:\\\\.\\\\.\\\\.)?          # varargs ellipsis?\\n        \\t\\t        )\\n        \\t\\t    (\\\\))                         # a close parenthesis\\n        \\t\\t)?\\n        \\t\",\n        \"beginCaptures\": {\n        \"1\": {\n        \"name\": \"keyword.control.import.define.c\"\n        },\n        \"2\": {\n        \"name\": \"entity.name.function.preprocessor.c\"\n        },\n        \"4\": {\n        \"name\": \"punctuation.definition.parameters.begin.c\"\n        },\n        \"5\": {\n        \"name\": \"variable.parameter.preprocessor.c\"\n        },\n        \"7\": {\n        \"name\": \"punctuation.separator.parameters.c\"\n        },\n        \"8\": {\n        \"name\": \"punctuation.definition.parameters.end.c\"\n        }\n        },\n        \"end\": \"(?=(?://|/\\\\*))|$\",\n        \"name\": \"meta.preprocessor.macro.c\",\n        \"patterns\": [\n        {\n        \"match\": \"(?>\\\\\\\\\\\\s*\\\\n)\",\n        \"name\": \"punctuation.separator.continuation.c\"\n        },\n        {\n        \"include\": \"$base\"\n        }\n        ]\n        },\n        {\n        \"begin\": \"^\\\\s*#\\\\s*(error|warning)\\\\b\",\n        \"captures\": {\n        \"1\": {\n        \"name\": \"keyword.control.import.error.c\"\n        }\n        },\n        \"end\": \"$\",\n        \"name\": \"meta.preprocessor.diagnostic.c\",\n        \"patterns\": [\n        {\n        \"match\": \"(?>\\\\\\\\\\\\s*\\\\n)\",\n        \"name\": \"punctuation.separator.continuation.c\"\n        }\n        ]\n        },\n        {\n        \"begin\": \"^\\\\s*#\\\\s*(include|import|property)\\\\b\\\\s+\",\n        \"captures\": {\n        \"1\": {\n        \"name\": \"keyword.control.import.include.c\"\n        }\n        },\n        \"end\": \"(?=(?://|/\\\\*))|$\",\n        \"name\": \"meta.preprocessor.c.include\",\n        \"patterns\": [\n        {\n        \"match\": \"(?>\\\\\\\\\\\\s*\\\\n)\",\n        \"name\": \"punctuation.separator.continuation.c\"\n        },\n        {\n        \"begin\": \"\\\"\",\n        \"beginCaptures\": {\n        \"0\": {\n        \"name\": \"punctuation.definition.string.begin.c\"\n        }\n        },\n        \"end\": \"\\\"\",\n        \"endCaptures\": {\n        \"0\": {\n        \"name\": \"punctuation.definition.string.end.c\"\n        }\n        },\n        \"name\": \"string.quoted.double.include.c\"\n        },\n        {\n        \"begin\": \"<\",\n        \"beginCaptures\": {\n        \"0\": {\n        \"name\": \"punctuation.definition.string.begin.c\"\n        }\n        },\n        \"end\": \">\",\n        \"endCaptures\": {\n        \"0\": {\n        \"name\": \"punctuation.definition.string.end.c\"\n        }\n        },\n        \"name\": \"string.quoted.other.lt-gt.include.c\"\n        }\n        ]\n        },\n        {\n        \"include\": \"#pragma-mark\"\n        },\n        {\n        \"begin\": \"^\\\\s*#\\\\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef)\\\\b\",\n        \"captures\": {\n        \"1\": {\n        \"name\": \"keyword.control.import.c\"\n        }\n        },\n        \"end\": \"(?=(?://|/\\\\*))|$\",\n        \"name\": \"meta.preprocessor.c\",\n        \"patterns\": [\n        {\n        \"match\": \"(?>\\\\\\\\\\\\s*\\\\n)\",\n        \"name\": \"punctuation.separator.continuation.c\"\n        }\n        ]\n        },\n        {\n        \"match\": \"\\\\b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t)\\\\b\",\n        \"name\": \"support.type.sys-types.c\"\n        },\n        {\n        \"match\": \"\\\\b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\\\\b\",\n        \"name\": \"support.type.pthread.c\"\n        },\n        {\n        \"match\": \"\\\\b(int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t)\\\\b\",\n        \"name\": \"support.type.stdint.c\"\n        },\n        {\n        \"match\": \"\\\\b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\\\\b\",\n        \"name\": \"support.constant.mac-classic.c\"\n        },\n        {\n        \"match\": \"\\\\b(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\\\\b\",\n        \"name\": \"support.type.mac-classic.c\"\n        },\n        {\n        \"comment\": \"Reserved POSIX types\",\n        \"match\": \"\\\\b([a-z0-9_]+_t)\\\\b\",\n        \"name\": \"support.type.posix-reserved.c\"\n        },\n        {\n        \"include\": \"#block\"\n        },\n        {\n        \"begin\": \"(?x)\\n    \\t\\t(?:  ^                                 # begin-of-line\\n    \\t\\t  |  \\n    \\t\\t     (?: (?= \\\\s )           (?<!else|new|return) (?<=\\\\w)      #  or word + space before name\\n    \\t\\t       | (?= \\\\s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name\\n    \\t\\t     )\\n    \\t\\t)\\n    \\t\\t(\\\\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate)\\\\s*\\\\()\\n    \\t\\t(\\n    \\t\\t\\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name\\n    \\t\\t\\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\\\(\\\\) | \\\\[\\\\] ) )  # if it is a C++ operator\\n    \\t\\t)\\n    \\t\\t \\\\s*(?=\\\\()\",\n        \"beginCaptures\": {\n        \"1\": {\n        \"name\": \"punctuation.whitespace.function.leading.c\"\n        },\n        \"3\": {\n        \"name\": \"entity.name.function.c\"\n        },\n        \"4\": {\n        \"name\": \"punctuation.definition.parameters.c\"\n        }\n        },\n        \"end\": \"(?<=\\\\})|(?=#)|(;)\",\n        \"name\": \"meta.function.c\",\n        \"patterns\": [\n        {\n        \"include\": \"#comments\"\n        },\n        {\n        \"include\": \"#parens\"\n        },\n        {\n        \"match\": \"\\\\bconst\\\\b\",\n        \"name\": \"storage.modifier.c\"\n        },\n        {\n        \"include\": \"#block\"\n        }\n        ]\n        }\n    ],\n    \"repository\": {\n    \"access\": {\n    \"captures\": {\n    \"1\": {\n    \"name\": \"punctuation.separator.variable-access.c\"\n    },\n    \"2\": {\n    \"name\": \"variable.other.dot-access.c\"\n    }\n    },\n    \"match\": \"(\\\\.)([a-zA-Z_][a-zA-Z_0-9]*)\\\\b(?!\\\\s*\\\\()\"\n    },\n    \"block\": {\n    \"patterns\": [\n    {\n    \"begin\": \"\\\\{\",\n    \"beginCaptures\": {\n    \"0\": {\n    \"name\": \"punctuation.section.block.begin.c\"\n    }\n    },\n    \"end\": \"\\\\}\",\n    \"endCaptures\": {\n    \"0\": {\n    \"name\": \"punctuation.section.block.end.c\"\n    }\n    },\n    \"name\": \"meta.block.c\",\n    \"patterns\": [\n    {\n    \"include\": \"#block_innards\"\n    }\n    ]\n    }\n    ]\n    },\n    \"block_innards\": {\n    \"patterns\": [\n    {\n    \"include\": \"#preprocessor-rule-enabled-block\"\n    },\n    {\n    \"include\": \"#preprocessor-rule-disabled-block\"\n    },\n    {\n    \"include\": \"#preprocessor-rule-other-block\"\n    },\n    {\n    \"include\": \"#sizeof\"\n    },\n    {\n    \"include\": \"#access\"\n    },\n    {\n    \"include\": \"#libc\"\n    },\n    {\n    \"include\": \"#c_function_call\"\n    },\n    {\n    \"captures\": {\n    \"1\": {\n    \"name\": \"variable.other.c\"\n    },\n    \"2\": {\n    \"name\": \"punctuation.definition.parameters.c\"\n    }\n    },\n    \"match\": \"(?x)\\n\\t\\t\\t        (?x)\\n\\t\\t\\t(?:  \\n\\t\\t\\t     (?: (?= \\\\s )           (?<!else|new|return) (?<=\\\\w)\\\\s+      #  or word + space before name\\n\\t\\t\\t     )\\n\\t\\t\\t)\\n\\t\\t\\t(\\n\\t\\t\\t\\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name\\n\\t\\t\\t\\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\\\(\\\\) | \\\\[\\\\] ) )?  # if it is a C++ operator\\n\\t\\t\\t)\\n\\t\\t\\t \\\\s*(\\\\()\",\n    \"name\": \"meta.initialization.c\"\n    },\n    {\n    \"include\": \"#block\"\n    },\n    {\n    \"include\": \"$base\"\n    }\n    ]\n    },\n    \"c_function_call\": {\n    \"captures\": {\n    \"1\": {\n    \"name\": \"punctuation.whitespace.function-call.leading.c\"\n    },\n    \"2\": {\n    \"name\": \"support.function.any-method.c\"\n    },\n    \"3\": {\n    \"name\": \"punctuation.definition.parameters.c\"\n    }\n    },\n    \"match\": \"(?x) (?: (?= \\\\s )  (?:(?<=else|new|return) | (?<!\\\\w)) (\\\\s+))?\\n\\t\\t\\t(\\\\b \\n\\t\\t\\t\\t(?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate)\\\\s*\\\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\\\b | :: )++                  # actual name\\n\\t\\t\\t)\\n\\t\\t\\t \\\\s*(\\\\()\",\n    \"name\": \"meta.function-call.c\"\n    },\n    \"comments\": {\n    \"patterns\": [\n    {\n    \"captures\": {\n    \"1\": {\n    \"name\": \"meta.toc-list.banner.block.c\"\n    }\n    },\n    \"match\": \"^/\\\\* =(\\\\s*.*?)\\\\s*= \\\\*/$\\\\n?\",\n    \"name\": \"comment.block.c\"\n    },\n    {\n    \"begin\": \"/\\\\*\",\n    \"beginCaptures\": {\n    \"0\": {\n    \"name\": \"punctuation.definition.comment.begin.c\"\n    }\n    },\n    \"end\": \"\\\\*/\",\n    \"endCaptures\": {\n    \"0\": {\n    \"name\": \"punctuation.definition.comment.end.c\"\n    }\n    },\n    \"name\": \"comment.block.c\"\n    },\n    {\n    \"match\": \"\\\\*/.*\\\\n\",\n    \"name\": \"invalid.illegal.stray-comment-end.c\"\n    },\n    {\n    \"captures\": {\n    \"1\": {\n    \"name\": \"meta.toc-list.banner.line.c\"\n    }\n    },\n    \"match\": \"^// =(\\\\s*.*?)\\\\s*=\\\\s*$\\\\n?\",\n    \"name\": \"comment.line.banner.c++\"\n    },\n    {\n    \"begin\": \"(^[ \\\\t]+)?(?=//)\",\n    \"beginCaptures\": {\n    \"1\": {\n    \"name\": \"punctuation.whitespace.comment.leading.c++\"\n    }\n    },\n    \"end\": \"(?!\\\\G)\",\n    \"patterns\": [\n    {\n    \"begin\": \"//\",\n    \"beginCaptures\": {\n    \"0\": {\n    \"name\": \"punctuation.definition.comment.c++\"\n    }\n    },\n    \"end\": \"\\\\n\",\n    \"name\": \"comment.line.double-slash.c++\",\n    \"patterns\": [\n    {\n    \"match\": \"(?>\\\\\\\\\\\\s*\\\\n)\",\n    \"name\": \"punctuation.separator.continuation.c++\"\n    }\n    ]\n    }\n    ]\n    }\n    ]\n    },\n    \"disabled\": {\n    \"begin\": \"^\\\\s*#\\\\s*if(n?def)?\\\\b.*$\",\n    \"comment\": \"eat nested preprocessor if(def)s\",\n    \"end\": \"^\\\\s*#\\\\s*endif\\\\b\",\n    \"patterns\": [\n    {\n    \"include\": \"#disabled\"\n    },\n    {\n    \"include\": \"#pragma-mark\"\n    }\n    ]\n    },\n    \"libc\": {\n    \"captures\": {\n    \"1\": {\n    \"name\": \"punctuation.whitespace.support.function.leading.c\"\n    },\n    \"2\": {\n    \"name\": \"support.function.C99.c\"\n    }\n    },\n    \"match\": \"(\\\\s*)\\\\b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\\\\b\"\n    },\n    \"parens\": {\n    \"begin\": \"\\\\(\",\n    \"beginCaptures\": {\n    \"0\": {\n    \"name\": \"punctuation.section.parens.begin.c\"\n    }\n    },\n    \"end\": \"\\\\)\",\n    \"endCaptures\": {\n    \"0\": {\n    \"name\": \"punctuation.section.parens.end.c\"\n    }\n    },\n    \"name\": \"meta.parens.c\",\n    \"patterns\": [\n    {\n    \"include\": \"$base\"\n    }\n    ]\n    },\n    \"pragma-mark\": {\n    \"captures\": {\n    \"1\": {\n    \"name\": \"meta.preprocessor.c\"\n    },\n    \"2\": {\n    \"name\": \"keyword.control.import.pragma.c\"\n    },\n    \"3\": {\n    \"name\": \"meta.toc-list.pragma-mark.c\"\n    }\n    },\n    \"match\": \"^\\\\s*(#\\\\s*(pragma\\\\s+mark)\\\\s+(.*))\",\n    \"name\": \"meta.section\"\n    },\n    \"preprocessor-rule-disabled\": {\n    \"begin\": \"^\\\\s*(#(if)\\\\s+(0)\\\\b).*\",\n    \"captures\": {\n    \"1\": {\n    \"name\": \"meta.preprocessor.c\"\n    },\n    \"2\": {\n    \"name\": \"keyword.control.import.if.c\"\n    },\n    \"3\": {\n    \"name\": \"constant.numeric.preprocessor.c\"\n    }\n    },\n    \"end\": \"^\\\\s*(#\\\\s*(endif)\\\\b)\",\n    \"patterns\": [\n    {\n    \"begin\": \"^\\\\s*(#\\\\s*(else)\\\\b)\",\n    \"captures\": {\n    \"1\": {\n    \"name\": \"meta.preprocessor.c\"\n    },\n    \"2\": {\n    \"name\": \"keyword.control.import.else.c\"\n    }\n    },\n    \"end\": \"(?=^\\\\s*#\\\\s*endif\\\\b)\",\n    \"patterns\": [\n    {\n    \"include\": \"$base\"\n    }\n    ]\n    },\n    {\n    \"begin\": \"\",\n    \"end\": \"(?=^\\\\s*#\\\\s*(else|endif)\\\\b)\",\n    \"name\": \"comment.block.preprocessor.if-branch\",\n    \"patterns\": [\n    {\n    \"include\": \"#disabled\"\n    },\n    {\n    \"include\": \"#pragma-mark\"\n    }\n    ]\n    }\n    ]\n    },\n    \"preprocessor-rule-disabled-block\": {\n    \"begin\": \"^\\\\s*(#(if)\\\\s+(0)\\\\b).*\",\n    \"captures\": {\n    \"1\": {\n    \"name\": \"meta.preprocessor.c\"\n    },\n    \"2\": {\n    \"name\": \"keyword.control.import.if.c\"\n    },\n    \"3\": {\n    \"name\": \"constant.numeric.preprocessor.c\"\n    }\n    },\n    \"end\": \"^\\\\s*(#\\\\s*(endif)\\\\b)\",\n    \"patterns\": [\n    {\n    \"begin\": \"^\\\\s*(#\\\\s*(else)\\\\b)\",\n    \"captures\": {\n    \"1\": {\n    \"name\": \"meta.preprocessor.c\"\n    },\n    \"2\": {\n    \"name\": \"keyword.control.import.else.c\"\n    }\n    },\n    \"end\": \"(?=^\\\\s*#\\\\s*endif\\\\b)\",\n    \"patterns\": [\n    {\n    \"include\": \"#block_innards\"\n    }\n    ]\n    },\n    {\n    \"begin\": \"\",\n    \"end\": \"(?=^\\\\s*#\\\\s*(else|endif)\\\\b)\",\n    \"name\": \"comment.block.preprocessor.if-branch.in-block\",\n    \"patterns\": [\n    {\n    \"include\": \"#disabled\"\n    },\n    {\n    \"include\": \"#pragma-mark\"\n    }\n    ]\n    }\n    ]\n    },\n    \"preprocessor-rule-enabled\": {\n    \"begin\": \"^\\\\s*(#(if)\\\\s+(0*1)\\\\b)\",\n    \"captures\": {\n    \"1\": {\n    \"name\": \"meta.preprocessor.c\"\n    },\n    \"2\": {\n    \"name\": \"keyword.control.import.if.c\"\n    },\n    \"3\": {\n    \"name\": \"constant.numeric.preprocessor.c\"\n    }\n    },\n    \"end\": \"^\\\\s*(#\\\\s*(endif)\\\\b)\",\n    \"patterns\": [\n    {\n    \"begin\": \"^\\\\s*(#\\\\s*(else)\\\\b).*\",\n    \"captures\": {\n    \"1\": {\n    \"name\": \"meta.preprocessor.c\"\n    },\n    \"2\": {\n    \"name\": \"keyword.control.import.else.c\"\n    }\n    },\n    \"contentName\": \"comment.block.preprocessor.else-branch\",\n    \"end\": \"(?=^\\\\s*#\\\\s*endif\\\\b)\",\n    \"patterns\": [\n    {\n    \"include\": \"#disabled\"\n    },\n    {\n    \"include\": \"#pragma-mark\"\n    }\n    ]\n    },\n    {\n    \"begin\": \"\",\n    \"end\": \"(?=^\\\\s*#\\\\s*(else|endif)\\\\b)\",\n    \"patterns\": [\n    {\n    \"include\": \"$base\"\n    }\n    ]\n    }\n    ]\n    },\n    \"preprocessor-rule-enabled-block\": {\n    \"begin\": \"^\\\\s*(#(if)\\\\s+(0*1)\\\\b)\",\n    \"captures\": {\n    \"1\": {\n    \"name\": \"meta.preprocessor.c\"\n    },\n    \"2\": {\n    \"name\": \"keyword.control.import.if.c\"\n    },\n    \"3\": {\n    \"name\": \"constant.numeric.preprocessor.c\"\n    }\n    },\n    \"end\": \"^\\\\s*(#\\\\s*(endif)\\\\b)\",\n    \"patterns\": [\n    {\n    \"begin\": \"^\\\\s*(#\\\\s*(else)\\\\b).*\",\n    \"captures\": {\n    \"1\": {\n    \"name\": \"meta.preprocessor.c\"\n    },\n    \"2\": {\n    \"name\": \"keyword.control.import.else.c\"\n    }\n    },\n    \"contentName\": \"comment.block.preprocessor.else-branch.in-block\",\n    \"end\": \"(?=^\\\\s*#\\\\s*endif\\\\b)\",\n    \"patterns\": [\n    {\n    \"include\": \"#disabled\"\n    },\n    {\n    \"include\": \"#pragma-mark\"\n    }\n    ]\n    },\n    {\n    \"begin\": \"\",\n    \"end\": \"(?=^\\\\s*#\\\\s*(else|endif)\\\\b)\",\n    \"patterns\": [\n    {\n    \"include\": \"#block_innards\"\n    }\n    ]\n    }\n    ]\n    },\n    \"preprocessor-rule-other\": {\n    \"begin\": \"^\\\\s*(#\\\\s*(if(n?def)?)\\\\b.*?(?:(?=(?://|/\\\\*))|$))\",\n    \"captures\": {\n    \"1\": {\n    \"name\": \"meta.preprocessor.c\"\n    },\n    \"2\": {\n    \"name\": \"keyword.control.import.c\"\n    }\n    },\n    \"end\": \"^\\\\s*(#\\\\s*(endif)\\\\b)\",\n    \"patterns\": [\n    {\n    \"include\": \"$base\"\n    }\n    ]\n    },\n    \"preprocessor-rule-other-block\": {\n    \"begin\": \"^\\\\s*(#\\\\s*(if(n?def)?)\\\\b.*?(?:(?=(?://|/\\\\*))|$))\",\n    \"captures\": {\n    \"1\": {\n    \"name\": \"meta.preprocessor.c\"\n    },\n    \"2\": {\n    \"name\": \"keyword.control.import.c\"\n    }\n    },\n    \"end\": \"^\\\\s*(#\\\\s*(endif)\\\\b)\",\n    \"patterns\": [\n    {\n    \"include\": \"#block_innards\"\n    }\n    ]\n    },\n    \"sizeof\": {\n    \"match\": \"\\\\b(sizeof)\\\\b\",\n    \"name\": \"keyword.operator.sizeof.c\"\n    },\n    \"string_escaped_char\": {\n    \"patterns\": [\n    {\n    \"match\": \"\\\\\\\\(\\\\\\\\|[abefnprtv'\\\"?]|[0-3]\\\\d{,2}|[4-7]\\\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})\",\n    \"name\": \"constant.character.escape.c\"\n    },\n    {\n    \"match\": \"\\\\\\\\.\",\n    \"name\": \"invalid.illegal.unknown-escape.c\"\n    }\n    ]\n    },\n    \"string_placeholder\": {\n    \"patterns\": [\n    {\n    \"match\": \"(?x)%\\n    \\t\\t\\t\\t\\t\\t(\\\\d+\\\\$)?                             # field (argument #)\\n    \\t\\t\\t\\t\\t\\t[#0\\\\- +']*                           # flags\\n    \\t\\t\\t\\t\\t\\t[,;:_]?                              # separator character (AltiVec)\\n    \\t\\t\\t\\t\\t\\t((-?\\\\d+)|\\\\*(-?\\\\d+\\\\$)?)?              # minimum field width\\n    \\t\\t\\t\\t\\t\\t(\\\\.((-?\\\\d+)|\\\\*(-?\\\\d+\\\\$)?)?)?         # precision\\n    \\t\\t\\t\\t\\t\\t(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\\n    \\t\\t\\t\\t\\t\\t[diouxXDOUeEfFgGaACcSspn%]           # conversion type\\n    \\t\\t\\t\\t\\t\",\n    \"name\": \"constant.other.placeholder.c\"\n    },\n    {\n    \"match\": \"%\",\n    \"name\": \"invalid.illegal.placeholder.c\"\n    }\n    ]\n    }\n    },\n\n    \"scopeName\": \"source.mq4\"\n}\n","markers":{"markers":{"1":{"id":1,"range":[[158,52],[158,52]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":17,"goalBufferRange":null,"autoscroll":true,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Leon/.atom/packages/language-mql/grammars/mql.json","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0c61ee162dadc2cc88894d8ce34c2e6e70632e28","deserializer":"TextBuffer"},{"text":"{\n  \"name\": \"language-mql\",\n  \"main\": \"./lib/language-mql\",\n  \"version\": \"0.0.0\",\n  \"description\": \"Syntax highlighting of MQL files in Atom.\",\n  \"activationEvents\": [\"language-mql:toggle\"],\n  \"repository\": \"https://github.com/atom/language-mql\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"atom\": \">0.50.0\"\n  },\n  \"dependencies\": {\n  }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[4,19],[4,19]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":45,"goalBufferRange":null,"autoscroll":false,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Leon/.atom/packages/language-mql/package.json","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"36104b392e2d271b28a9ed8038f5b65fedf6a019","deserializer":"TextBuffer"},{"text":"# MQL language support in Atom\n\nAdds syntax highlighting of MQL files in Atom.\n","markers":{"markers":{"1":{"id":1,"range":[[2,46],[2,46]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":47,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/Leon/.atom/packages/language-mql/README.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0dddb5cccddcdab6cae93db13b58caac13dcc14d","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":17,"softTabs":true,"scrollTop":1962,"scrollLeft":0,"displayBuffer":{"id":18,"softWrap":false,"editorWidthInChars":112,"tokenizedBuffer":{"bufferPath":"/Users/Leon/.atom/packages/language-mql/grammars/mql.json","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":45,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":46,"softWrap":false,"editorWidthInChars":113,"tokenizedBuffer":{"bufferPath":"/Users/Leon/.atom/packages/language-mql/package.json","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":47,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":48,"softWrap":false,"editorWidthInChars":116,"tokenizedBuffer":{"bufferPath":"/Users/Leon/.atom/packages/language-mql/README.md","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/Leon/.atom/packages/language-mql/package.json","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/Leon/.atom/packages/language-mql/grammars/mql.json":1395990052384,"/Users/Leon/.atom/packages/language-mql/package.json":1395990127457,"/Users/Leon/.atom/packages/language-mql/README.md":1395990079681},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":5110},"tree-view":{"directoryExpansionStates":{"grammars":{}},"selectedPath":"/Users/Leon/.atom/packages/language-mql/package.json","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"find-and-replace":{"viewState":{"findHistory":["source","include","const","include"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}}}}